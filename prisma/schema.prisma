// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id           Int            @id @default(autoincrement())
    email        String         @unique
    password     String
    is_verified  Boolean        @default(false)
    role         Role           @default(USER)
    Profile      Profile?
    Notification Notification[]
    Order        Order[]

    @@map("users")
}

enum Role {
    USER
    ADMIN
}

model Profile {
    id            Int     @id @default(autoincrement())
    nama          String
    no_telp       String
    tanggal_lahir String?
    alamat        String?
    photo_profile String?
    pin           Int?
    user          User    @relation(fields: [userId], references: [id])
    userId        Int     @unique

    @@map("profiles")
}

model Notification {
    id            Int              @id @default(autoincrement())
    judul         String
    deskripsi     String
    tanggal_waktu DateTime         @db.Timestamptz()
    kategori      NotificationEnum @default(INFO)
    user          User             @relation(fields: [userId], references: [id])
    userId        Int

    @@map("notifications")
}

enum NotificationEnum {
    INFO
    WARNING
    PROMO
}

model Plane {
    id            Int          @id @default(autoincrement())
    kode_pesawat  String
    model_pesawat String
    bagasi_kabin  Int
    bagasi        Int
    jarak_kursi   Int
    jumlah_kursi  Int
    status        Plane_Status
    Flight        Flight[]
    Airline       Airline?     @relation(fields: [airlineId], references: [id])
    airlineId     Int?

    @@map("planes")
}

enum Plane_Status {
    Delayed
    Boarding
    Cancelled
    Arrived
    Ready
}

model Airline {
    id            Int     @id @default(autoincrement())
    kode_maskapai String  @unique
    nama_maskapai String
    logo_maskapai String
    planes        Plane[]

    @@map("airlines")
}

model Airport {
    id            Int       @id @default(autoincrement())
    kode_bandara  String    @unique
    nama_bandara  String
    lokasi        String
    keberangkatan Flight[]  @relation(name: "keberangkatan")
    kedatangan    Flight[]  @relation(name: "kedatangan")
    Transit       Transit[]

    @@map("airports")
}

model Flight {
    id                       Int          @id @default(autoincrement())
    bandara_keberangkatan    Airport      @relation(name: "keberangkatan", fields: [bandara_keberangkatan_id], references: [id])
    bandara_keberangkatan_id Int
    bandara_kedatangan       Airport      @relation(name: "kedatangan", fields: [bandara_kedatangan_id], references: [id])
    bandara_kedatangan_id    Int
    terminal_keberangkatan   String
    terminal_kedatangan      String
    status                   Plane_Status
    Schedule                 Schedule?
    Plane                    Plane?       @relation(fields: [planeId], references: [id])
    planeId                  Int?
    Transit                  Transit[]

    @@map("flights")
}

model Schedule {
    id            Int      @id @default(autoincrement())
    flight        Flight   @relation(fields: [flightId], references: [id])
    flightId      Int      @unique
    keberangkatan DateTime @db.Timestamptz()
    kedatangan    DateTime @db.Timestamptz()
    Ticket        Ticket[]

    @@map("schedules")
}

model Ticket {
    id         Int      @id @default(autoincrement())
    kelas      String
    harga      Int
    bagasi     Boolean  @default(false)
    makanan    Boolean  @default(false)
    hiburan    Boolean  @default(false)
    wifi       Boolean  @default(false)
    usb        Boolean  @default(false)
    jumlah     Int      @default(0)
    schedule   Schedule @relation(fields: [scheduleId], references: [id])
    scheduleId Int
    Order      Order[]

    @@map("tickets")
}

model Order {
    id       Int           @id @default(autoincrement())
    ticket   Ticket        @relation(fields: [ticketId], references: [id])
    ticketId Int
    user     User          @relation(fields: [userId], references: [id])
    userId   Int
    Orders   Order_Items[]
    Checkout Checkout?

    @@map("orders")
}

model Order_Items {
    id              Int      @id @default(autoincrement())
    nama            String
    tanggal_lahir   String
    kewarganegaraan String
    ktp_pasport     String?
    is_baby         Boolean
    negara_penerbit String
    berlaku_sampai  DateTime @db.Timestamptz()
    no_kursi        Int
    nama_keluarga   String?
    Order           Order?   @relation(fields: [orderId], references: [id])
    orderId         Int?

    @@map("order_items")
}

model Checkout {
    id                  Int                  @id @default(autoincrement())
    metode_pembayaran   String?
    is_payment          Boolean              @default(false)
    total               Int
    tanggal_waktu       DateTime?            @db.Timestamptz()
    status              CheckoutStatus       @default(Unpaid)
    order               Order                @relation(fields: [orderId], references: [id])
    orderId             Int                  @unique
    History_Transaction History_Transaction?

    @@map("checkouts")
}

enum CheckoutStatus {
    Cancelled
    Paid
    Unpaid
}

model History_Transaction {
    id         Int      @id @default(autoincrement())
    checkout   Checkout @relation(fields: [checkoutId], references: [id])
    checkoutId Int      @unique

    @@map("history_transactions")
}

model Transit {
    id        Int     @id @default(autoincrement())
    flightId  Int
    airportId Int
    flight    Flight  @relation(fields: [flightId], references: [id])
    airport   Airport @relation(fields: [airportId], references: [id])

    @@map("transits")
}